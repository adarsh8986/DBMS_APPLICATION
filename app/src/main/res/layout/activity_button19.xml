<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="8dp"
    android:scrollbars="none"
    tools:context="urgroup.in.dbmssqlcompleteguide.button19">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="DBMS - Concurrency Control"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="In a multiprogramming environment where multiple transactions can be executed simultaneously, it is highly important to control the concurrency of transactions. We have concurrency control protocols to ensure atomicity, isolation, and serializability of concurrent transactions. Concurrency control protocols can be broadly divided into two categories −"
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Lock based protocols"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Time stamp based protocols"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Lock-based Protocols"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Database systems equipped with lock-based protocols use a mechanism by which any transaction cannot read or write data until it acquires an appropriate lock on it. Locks are of two kinds −"
            />
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Binary Locks − A lock on a data item can be in two states; it is either locked or unlocked."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Shared/exclusive − This type of locking mechanism differentiates the locks based on their uses. If a lock is acquired on a data item to perform a write operation, it is an exclusive lock. Allowing more than one transaction to write on the same data item would lead the database into an inconsistent state. Read locks are shared because no data value is being changed."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="There are four types of lock protocols available −"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Simplistic Lock Protocol"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Simplistic lock-based protocols allow transactions to obtain a lock on every object before a 'write' operation is performed. Transactions may unlock the data item after completing the ‘write’ operation."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Pre-claiming Lock Protocol"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Pre-claiming protocols evaluate their operations and create a list of data items on which they need locks. Before initiating an execution, the transaction requests the system for all the locks it needs beforehand. If all the locks are granted, the transaction executes and releases all the locks when all its operations are over. If all the locks are not granted, the transaction rolls back and waits until all the locks are granted."
            />

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/pre_claiming" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Two-Phase Locking 2PL"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="This locking protocol divides the execution phase of a transaction into three parts. In the first part, when the transaction starts executing, it seeks permission for the locks it requires. The second part is where the transaction acquires all the locks. As soon as the transaction releases its first lock, the third phase starts. In this phase, the transaction cannot demand any new locks; it only releases the acquired locks."
            />
        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/pl" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Two-phase locking has two phases, one is growing, where all the locks are being acquired by the transaction; and the second phase is shrinking, where the locks held by the transaction are being released."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="To claim an exclusive (write) lock, a transaction must first acquire a shared (read) lock and then upgrade it to an exclusive lock."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Strict Two-Phase Locking"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The first phase of Strict-2PL is same as 2PL. After acquiring all the locks in the first phase, the transaction continues to execute normally. But in contrast to 2PL, Strict-2PL does not release a lock after using it. Strict-2PL holds all the locks until the commit point and releases all the locks at a time."
            />

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/plll" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Strict-2PL does not have cascading abort as 2PL does."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Timestamp-based Protocols"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The most commonly used concurrency protocol is the timestamp based protocol. This protocol uses either system time or logical counter as a timestamp."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Lock-based protocols manage the order between the conflicting pairs among transactions at the time of execution, whereas timestamp-based protocols start working as soon as a transaction is created."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Every transaction has a timestamp associated with it, and the ordering is determined by the age of the transaction. A transaction created at 0002 clock time would be older than all other transactions that come after it. For example, any transaction 'y' entering the system at 0004 is two seconds younger and the priority would be given to the older one."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="In addition, every data item is given the latest read and write-timestamp. This lets the system know when the last ‘read and write’ operation was performed on the data item."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Timestamp Ordering Protocol"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The timestamp-ordering protocol ensures serializability among transactions in their conflicting read and write operations. This is the responsibility of the protocol system that the conflicting pair of tasks should be executed according to the timestamp values of the transactions."
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="The timestamp of transaction Ti is denoted as TS(Ti)."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Read time-stamp of data-item X is denoted by R-timestamp(X)."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Write time-stamp of data-item X is denoted by W-timestamp(X)."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>
        </TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Timestamp ordering protocol works as follows −"
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="If a transaction Ti issues a read(X) operation −"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If TS(Ti) &lt; W-timestamp(X). \n Operation rejected."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If TS(Ti) &gt;= W-timestamp(X).\n Operation executed."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="All data-item timestamps updated."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="If a transaction Ti issues a write(X) operation −"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If TS(Ti) &lt; R-timestamp(X) \n Operation rejected."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If TS(Ti) &lt; W-timestamp(X) \n Operation rejected and Ti rolled back."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>


            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Otherwise, operation executed."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Thomas' Write Rule"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="This rule states if TS(Ti) &lt; W-timestamp(X), then the operation is rejected and Ti is rolled back."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Time-stamp ordering rules can be modified to make the schedule view serializable."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Instead of making Ti rolled back, the 'write' operation itself is ignored."
            />
    </LinearLayout>
</ScrollView>
