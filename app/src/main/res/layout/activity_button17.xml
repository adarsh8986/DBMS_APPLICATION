<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="8dp"
    android:scrollbars="none"
    tools:context="urgroup.in.dbmssqlcompleteguide.button17">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="DBMS - Hashing"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="For a huge database structure, it can be almost next to impossible to search all the index values through all its level and then reach the destination data block to retrieve the desired data. Hashing is an effective technique to calculate the direct location of a data record on the disk without using index structure."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Hashing uses hash functions with search keys as parameters to generate the address of a data record."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Hash Organization"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Bucket − A hash file stores data in bucket format. Bucket is considered a unit of storage. A bucket typically stores one complete disk block, which in turn can store one or more records."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Hash Function − A hash function, h, is a mapping function that maps all the set of search-keys K to the address where actual records are placed. It is a function from search keys to bucket addresses."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Static Hashing"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="In static hashing, when a search-key value is provided, the hash function always computes the same address. For example, if mod-4 hash function is used, then it shall generate only 5 values. The output address shall always be same for that function. The number of buckets provided remains unchanged at all times."
            />

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/static_hash" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Operation"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Insertion − When a record is required to be entered using static hash, the hash function h computes the bucket address for search key K, where the record will be stored. \n Bucket address = h(K)"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Search − When a record needs to be retrieved, the same hash function can be used to retrieve the address of the bucket where the data is stored."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Delete − This is simply a search followed by a deletion operation."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Bucket Overflow"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The condition of bucket-overflow is known as collision. This is a fatal state for any static hash function. In this case, overflow chaining can be used."
            />
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Overflow Chaining − When buckets are full, a new bucket is allocated for the same hash result and is linked after the previous one. This mechanism is called Closed Hashing."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/hash_chaining" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Linear Probing − When a hash function generates an address at which data is already stored, the next free bucket is allocated to it. This mechanism is called Open Hashing."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>
        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/hash_linear_probing" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Dynamic Hashing"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The problem with static hashing is that it does not expand or shrink dynamically as the size of the database grows or shrinks. Dynamic hashing provides a mechanism in which data buckets are added and removed dynamically and on-demand. Dynamic hashing is also known as extended hashing."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Hash function, in dynamic hashing, is made to produce a large number of values and only a few are used initially."
            />

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/dynamic_hashing" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Organization"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The prefix of an entire hash value is taken as a hash index. Only a portion of the hash value is used for computing bucket addresses. Every hash index has a depth value to signify how many bits are used for computing a hash function. These bits can address 2n buckets. When all these bits are consumed − that is, when all the buckets are full − then the depth value is increased linearly and twice the buckets are allocated."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Operation"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Querying − Look at the depth value of the hash index and use those bits to compute the bucket address."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Update − Perform a query as above and update the data."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Deletion − Perform a query to locate the desired data and delete the same."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Insertion − Compute the address of the bucket"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView>
            </TableRow></TableLayout>
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Hashing is not favorable when the data is organized in some ordering and the queries require a range of data. When data is discrete and random, hash performs the best."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Hashing algorithms have high complexity than indexing. All hash operations are done in constant time."
            />


    </LinearLayout>
</ScrollView>
