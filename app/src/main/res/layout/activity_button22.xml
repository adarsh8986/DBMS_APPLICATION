<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="8dp"
    android:scrollbars="none"
    tools:context="urgroup.in.dbmssqlcompleteguide.button22">
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="DBMS - Data Recovery"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Crash Recovery"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="DBMS is a highly complex system with hundreds of transactions being executed every second. The durability and robustness of a DBMS depends on its complex architecture and its underlying hardware and system software. If it fails or crashes amid transactions, it is expected that the system would follow some sort of algorithm or techniques to recover lost data."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Failure Classification"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="To see where the problem has occurred, we generalize a failure into various categories, as follows −"
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Transaction failure"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="A transaction has to abort when it fails to execute or when it reaches a point from where it can’t go any further. This is called transaction failure where only a few transactions or processes are hurt."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Reasons for a transaction failure could be −"
            />
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Logical errors − Where a transaction cannot complete because it has some code error or any internal error condition."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="System errors − Where the database system itself terminates an active transaction because the DBMS is not able to execute it, or it has to stop because of some system condition. For example, in case of deadlock or resource unavailability, the system aborts an active transaction."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

        </TableLayout>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="System Crash"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="There are problems − external to the system − that may cause the system to stop abruptly and cause the system to crash. For example, interruptions in power supply may cause the failure of underlying hardware or software failure."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Examples may include operating system errors."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Disk Failure"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="In early days of technology evolution, it was a common problem where hard-disk drives or storage drives used to fail frequently."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Disk failures include formation of bad sectors, unreachability to the disk, disk head crash or any other failure, which destroys all or a part of disk storage."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Storage Structure"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="We have already described the storage system. In brief, the storage structure can be divided into two categories −"
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Volatile storage − As the name suggests, a volatile storage cannot survive system crashes. Volatile storage devices are placed very close to the CPU; normally they are embedded onto the chipset itself. For example, main memory and cache memory are examples of volatile storage. They are fast but can store only a small amount of information."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Non-volatile storage − These memories are made to survive system crashes. They are huge in data storage capacity, but slower in accessibility. Examples may include hard-disks, magnetic tapes, flash memory, and non-volatile (battery backed up) RAM."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>
        </TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Recovery and Atomicity"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="When a system crashes, it may have several transactions being executed and various files opened for them to modify the data items. Transactions are made of various operations, which are atomic in nature. But according to ACID properties of DBMS, atomicity of transactions as a whole must be maintained, that is, either all the operations are executed or none."
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="When a DBMS recovers from a crash, it should maintain the following −"
            />
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="It should check the states of all the transactions, which were being executed."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="A transaction may be in the middle of some operation; the DBMS must ensure the atomicity of the transaction in this case."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="It should check whether the transaction can be completed now or it needs to be rolled back."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="No transactions would be allowed to leave the DBMS in an inconsistent state."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>
        </TableLayout>



        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="There are two types of techniques, which can help a DBMS in recovering as well as maintaining the atomicity of a transaction −"
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Maintaining the logs of each transaction, and writing them onto some stable storage before actually modifying the database."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Maintaining shadow paging, where the changes are done on a volatile memory, and later, the actual database is updated."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Log-based Recovery"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Log is a sequence of records, which maintains the records of actions performed by a transaction. It is important that the logs are written prior to the actual modification and stored on a stable storage media, which is failsafe"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Log-based recovery works as follows −"
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="The log file is kept on a stable storage media."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="When a transaction enters the system and starts execution, it writes a log about it."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>


        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Tn, Start"
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="When the transaction modifies an item X, it write logs as follows −"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Tn, X, V1, V2"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="It reads Tn has changed the value of X, from V1 to V2."
            />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="When the transaction finishes, it logs −"
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Tn, commit"
            />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="The database can be modified using two approaches −"
            />
        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
            <TextView
                android:layout_column="1"
                android:text="•"
                android:textSize="23dp"></TextView>
            <TextView
                android:layout_width="wrap_content"
                android:layout_column="2"
                android:text="Deferred database modification − All logs are written on to the stable storage and the database is updated when a transaction commits."
                android:textColor="#008080"
                android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="Immediate database modification − Each log follows an actual database modification. That is, the database is modified immediately after every operation."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Recovery with Concurrent Transactions"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="When more than one transaction are being executed in parallel, the logs are interleaved. At the time of recovery, it would become hard for the recovery system to backtrack all logs, and then start recovering. To ease this situation, most modern DBMS use the concept of 'checkpoints'."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Checkpoint"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="Keeping and maintaining logs in real time and in real environment may fill out all the memory space available in the system. As time passes, the log file may grow too big to be handled at all. Checkpoint is a mechanism where all the previous logs are removed from the system and stored permanently in a storage disk. Checkpoint declares a point before which the DBMS was in consistent state, and all the transactions were committed."
            />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="Recovery"
            android:textAlignment="center"
            android:textColor="#000000"
            android:textSize="30dp" />
        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="When a system with concurrent transactions crashes and recovers, it behaves in the following manner −"
            />

        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="400dp"
            android:layout_marginTop="14dp"
            android:scaleType="fitXY"
            android:src="@drawable/recovery" />

        <TableLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp">
            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="The recovery system reads the logs backwards from the end to the last checkpoint."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="It maintains two lists, an undo-list and a redo-list."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If the recovery system sees a log with (Tn, Start) and (Tn, Commit) or just (Tn, Commit), it puts the transaction in the redo-list."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow>

            <TableRow>
                <TextView
                    android:layout_column="1"
                    android:text="•"
                    android:textSize="23dp"></TextView>
                <TextView
                    android:layout_width="wrap_content"
                    android:layout_column="2"
                    android:text="If the recovery system sees a log with (Tn, Start) but no commit or abort log found, it puts the transaction in undo-list."
                    android:textColor="#008080"
                    android:textSize="19dp"></TextView></TableRow></TableLayout>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="14dp"
            android:layout_weight="1"
            android:textColor="#008080"
            android:textSize="19dp"
            android:text="All the transactions in the undo-list are then undone and their logs are removed. All the transactions in the redo-list and their previous logs are removed and then redone before saving their logs."
            />
    </LinearLayout>
</ScrollView>
